#pragma once
#include "DoubleLinkedList.hpp"
#include <vector>
#include"../core/GridPosition.hpp"
namespace DataCollection{
    class GameData{
    private:
        /* number of collisions */
        int numOfCol;

        std::vector<int>collisions;///< A vector of Collision Data
        std::vector<size_t>ShortestPathAction; ///<A vector of the shortest path action
        std::vector<DoubleLinkedList<cse491::GridPosition>>ShortestPathPos;///<A vector of the shortest Position
    public:
        /**
         * @brief Default constructor for AgentData class.
         */
        GameData() = default;

        /**
         * @brief Destructor for AgentData class.
         */
        ~GameData() = default;

        /**
         * @brief Get the number of collisions.
         * @return Number of collisions.
         */
        int getNumOfCol() const {
            return numOfCol;
        }
///<--------------These member functions are generated by Chatgpt
        /**
         * @brief Set the number of collisions.
         * @param value The value to set.
         */
        void setNumOfCol(int value) {
            numOfCol = value;
        }

        /**
         * @brief Store collision data.
         * @param collision Collision data to store.
         */
        void StoreCollision(int collision) {
            collisions.push_back(collision);
        }

        /**
         * @brief Retrieve the stored collisions data.
         * @return A constant reference to the vector of collisions.
         */
        const std::vector<int>& GetCollisions() const {
            return collisions;
        }

        /**
         * @brief Store a shortest path action.
         * @param action Shortest path action to store.
         */
        void StoreShortestPathAction(size_t action) {
            ShortestPathAction.push_back(action);
        }

        /**
         * @brief Retrieve the stored shortest path actions.
         * @return A constant reference to the vector of shortest path actions.
         */
        const std::vector<size_t>& GetShortestPathActions() const {
            return ShortestPathAction;
        }

        /**
         * @brief Store a shortest path position.
         * @param position Shortest path position to store.
         */
        void StoreShortestPathPos(const DoubleLinkedList<cse491::GridPosition>& position) {
            ShortestPathPos.push_back(position);
        }

        /**
         * @brief Retrieve the stored shortest path positions.
         * @return A constant reference to the vector of shortest path positions.
         */
        const std::vector<DoubleLinkedList<cse491::GridPosition>>& GetShortestPathPos() const {
            return ShortestPathPos;
        }
    };
    }


